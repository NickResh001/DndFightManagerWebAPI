// <auto-generated />
using System;
using DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DndFightManagerDBContext))]
    [Migration("20240414113925_SomeRenaming")]
    partial class SomeRenaming
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Ability", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Ability", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AbilityList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("AbilityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("SavingThrowProficiency")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("BeastNoteId");

                    b.ToTable("AbilityList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Action", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ActionResourceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int?>("Cooldown1_SpellSlotLevel")
                        .HasColumnType("int");

                    b.Property<int?>("Cooldown2_DiceSize")
                        .HasColumnType("int");

                    b.Property<int?>("Cooldown2_LowerRangeLimit")
                        .HasColumnType("int");

                    b.Property<int?>("Cooldown2_UpperRangeLimit")
                        .HasColumnType("int");

                    b.Property<int?>("Cooldown3_HowManyTimes")
                        .HasColumnType("int");

                    b.Property<int?>("Cooldown3_MeasureMultiply")
                        .HasColumnType("int");

                    b.Property<string>("Cooldown3_TimeMeasureId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CooldownTypeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<int?>("Lair_InitiativeBonus")
                        .HasColumnType("int");

                    b.Property<string>("ParentMultiactionId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Reaction_Condition")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ActionResourceId");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("Cooldown3_TimeMeasureId");

                    b.HasIndex("CooldownTypeId");

                    b.HasIndex("ParentMultiactionId");

                    b.ToTable("Action", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ActionResource", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ActionResource", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ActionResourceList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ActionResourceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("BeastId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActionResourceId");

                    b.HasIndex("BeastId");

                    b.ToTable("ActionResourceList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ActionThrow", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ActionId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Throw")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("ActionThrow", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Alignment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Goodness")
                        .HasColumnType("int");

                    b.Property<int>("Law")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Alignment", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Beast", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("CurrentArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("CurrentInitiative")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FightTeamId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("IsSuprised")
                        .HasColumnType("bit");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("SceneSaveId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("TemporaryHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("FightTeamId");

                    b.HasIndex("SceneSaveId");

                    b.ToTable("Beast", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.BeastNote", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("AlignmentId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AllUses")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastTypeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ChallengeRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("HitPointsDice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InitiativeBonus")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeingModerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModeratorId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SpecialBonus")
                        .HasColumnType("int");

                    b.Property<string>("SpellAbilityId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SpellAttackBonus")
                        .HasColumnType("int");

                    b.Property<int?>("SpellSaveThrowDifficulty")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UniqueUses")
                        .HasColumnType("int");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BeastTypeId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("SizeId");

                    b.HasIndex("SpellAbilityId");

                    b.ToTable("BeastNote", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.BeastType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BeastType", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Campaign", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Campaign", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Condition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ConditionImmunitiesList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ConditionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("ConditionId");

                    b.ToTable("ConditionImmunitiesList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ConditionList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ConditionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("RoundCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeastId");

                    b.HasIndex("ConditionId");

                    b.ToTable("ConditionList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CooldownType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CooldownType", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DamageTendency", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("DamageTendencyTypeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DamageTypeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Magical")
                        .HasColumnType("bit");

                    b.Property<bool>("NonMagical")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("DamageTendencyTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("DamageTendency", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DamageTendencyType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DamageTendencyType", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DamageType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DamageType", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.FightTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("SceneSaveId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SceneSaveId");

                    b.ToTable("FightTeam", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Habitat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Habitat", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.HabitatList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("HabitatId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("HabitatId");

                    b.ToTable("HabitatList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Scene", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("SettingId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("SettingId");

                    b.ToTable("Scene", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SceneSave", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("CurrentBeastInitiative")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("LastEditingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SceneId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneSave", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Sense", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sense", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SenseList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("DistanceInFeet")
                        .HasColumnType("int");

                    b.Property<string>("SenseId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("SenseId");

                    b.ToTable("SenseList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Size", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AbilityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SkillList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("Proficiency")
                        .HasColumnType("bit");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Speed", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Speed", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SpeedList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("DistanceInFeet")
                        .HasColumnType("int");

                    b.Property<string>("SpeedId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.HasIndex("SpeedId");

                    b.ToTable("SpeedList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SpellSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeastNoteId");

                    b.ToTable("SpellSlot", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SpellSlotsList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("CountAvailable")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeastId");

                    b.ToTable("SpellSlotsList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.TemporaryAbilityList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("AbilityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeastId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("SavingThrowProficiency")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("BeastId");

                    b.ToTable("TemporaryAbilityList", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Thing", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("BeastNoteId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BeastId");

                    b.HasIndex("BeastNoteId");

                    b.ToTable("Thing", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.TimeMeasure", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TimeMeasure", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AbilityList", b =>
                {
                    b.HasOne("DAL.Entities.Ability", "Ability")
                        .WithMany("AbilityLists")
                        .HasForeignKey("AbilityId")
                        .IsRequired()
                        .HasConstraintName("Fk_AbilityList_Ability");

                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("AbilityLists")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_AbilityList_BeastNote");

                    b.Navigation("Ability");

                    b.Navigation("BeastNote");
                });

            modelBuilder.Entity("DAL.Entities.Action", b =>
                {
                    b.HasOne("DAL.Entities.ActionResource", "ActionResource")
                        .WithMany("Actions")
                        .HasForeignKey("ActionResourceId")
                        .IsRequired()
                        .HasConstraintName("Fk_Action_ActionResource");

                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("Actions")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_Action_BeastNote");

                    b.HasOne("DAL.Entities.TimeMeasure", "Cooldown3_TimeMeasure")
                        .WithMany("Actions")
                        .HasForeignKey("Cooldown3_TimeMeasureId")
                        .HasConstraintName("Fk_Action_Cooldown3TimeMeasure");

                    b.HasOne("DAL.Entities.CooldownType", "CooldownType")
                        .WithMany("Actions")
                        .HasForeignKey("CooldownTypeId")
                        .IsRequired()
                        .HasConstraintName("Fk_Action_CooldownType");

                    b.HasOne("DAL.Entities.Action", "ParentMultiaction")
                        .WithMany("ChildActions")
                        .HasForeignKey("ParentMultiactionId")
                        .HasConstraintName("Fk_Action_ParentMultiaction");

                    b.Navigation("ActionResource");

                    b.Navigation("BeastNote");

                    b.Navigation("Cooldown3_TimeMeasure");

                    b.Navigation("CooldownType");

                    b.Navigation("ParentMultiaction");
                });

            modelBuilder.Entity("DAL.Entities.ActionResourceList", b =>
                {
                    b.HasOne("DAL.Entities.ActionResource", "ActionResource")
                        .WithMany("ActionResourceLists")
                        .HasForeignKey("ActionResourceId")
                        .IsRequired()
                        .HasConstraintName("Fk_ActionResourceList_ActionResource");

                    b.HasOne("DAL.Entities.Beast", "Beast")
                        .WithMany("ActionResourceLists")
                        .HasForeignKey("BeastId")
                        .IsRequired()
                        .HasConstraintName("Fk_ActionResourceList_Beast");

                    b.Navigation("ActionResource");

                    b.Navigation("Beast");
                });

            modelBuilder.Entity("DAL.Entities.ActionThrow", b =>
                {
                    b.HasOne("DAL.Entities.Action", "Action")
                        .WithMany("ActionThrows")
                        .HasForeignKey("ActionId")
                        .IsRequired()
                        .HasConstraintName("Fk_ActionThrow_Action");

                    b.Navigation("Action");
                });

            modelBuilder.Entity("DAL.Entities.Beast", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("Beasts")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_Beast_BeastNote");

                    b.HasOne("DAL.Entities.FightTeam", "FightTeam")
                        .WithMany("Beasts")
                        .HasForeignKey("FightTeamId")
                        .IsRequired()
                        .HasConstraintName("Fk_Beast_FightTeam");

                    b.HasOne("DAL.Entities.SceneSave", "SceneSave")
                        .WithMany("Beasts")
                        .HasForeignKey("SceneSaveId")
                        .IsRequired()
                        .HasConstraintName("Fk_Beast_SceneSave");

                    b.Navigation("BeastNote");

                    b.Navigation("FightTeam");

                    b.Navigation("SceneSave");
                });

            modelBuilder.Entity("DAL.Entities.BeastNote", b =>
                {
                    b.HasOne("DAL.Entities.Alignment", "Alignment")
                        .WithMany("BeastNotes")
                        .HasForeignKey("AlignmentId")
                        .IsRequired()
                        .HasConstraintName("Fk_BeastNote_Alignment");

                    b.HasOne("DAL.Entities.User", "Author")
                        .WithMany("CreatedBeastNotes")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("Fk_BeastNote_Author");

                    b.HasOne("DAL.Entities.BeastType", "BeastType")
                        .WithMany("BeastNotes")
                        .HasForeignKey("BeastTypeId")
                        .IsRequired()
                        .HasConstraintName("Fk_BeastNote_BeastType");

                    b.HasOne("DAL.Entities.User", "Moderator")
                        .WithMany("ModeratedBeastNotes")
                        .HasForeignKey("ModeratorId")
                        .HasConstraintName("Fk_BeastNote_Moderator");

                    b.HasOne("DAL.Entities.Size", "Size")
                        .WithMany("BeastNotes")
                        .HasForeignKey("SizeId")
                        .IsRequired()
                        .HasConstraintName("Fk_BeastNote_Size");

                    b.HasOne("DAL.Entities.Ability", "SpellAbility")
                        .WithMany("BeastNotes")
                        .HasForeignKey("SpellAbilityId")
                        .HasConstraintName("Fk_BeastNote_SpellAbility");

                    b.Navigation("Alignment");

                    b.Navigation("Author");

                    b.Navigation("BeastType");

                    b.Navigation("Moderator");

                    b.Navigation("Size");

                    b.Navigation("SpellAbility");
                });

            modelBuilder.Entity("DAL.Entities.Campaign", b =>
                {
                    b.HasOne("DAL.Entities.User", "Author")
                        .WithMany("Campaigns")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("Fk_Campaign_Author");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DAL.Entities.ConditionImmunitiesList", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("ConditionImmunitiesLists")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_ConditionImmunitiesList_BeastNote");

                    b.HasOne("DAL.Entities.Condition", "Condition")
                        .WithMany("ConditionImmunitiesLists")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("Fk_ConditionImmunitiesList_Condition");

                    b.Navigation("BeastNote");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("DAL.Entities.ConditionList", b =>
                {
                    b.HasOne("DAL.Entities.Beast", "Beast")
                        .WithMany("ConditionLists")
                        .HasForeignKey("BeastId")
                        .IsRequired()
                        .HasConstraintName("Fk_ConditionLists_Beast");

                    b.HasOne("DAL.Entities.Condition", "Condition")
                        .WithMany("ConditionLists")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("Fk_ConditionLists_Condition");

                    b.Navigation("Beast");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("DAL.Entities.DamageTendency", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("DamageTendencies")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_DamageTendency_BeastNote");

                    b.HasOne("DAL.Entities.DamageTendencyType", "DamageTendencyType")
                        .WithMany("DamageTendencies")
                        .HasForeignKey("DamageTendencyTypeId")
                        .IsRequired()
                        .HasConstraintName("Fk_DamageTendency_DamageTendencyType");

                    b.HasOne("DAL.Entities.DamageType", "DamageType")
                        .WithMany("DamageTendencies")
                        .HasForeignKey("DamageTypeId")
                        .IsRequired()
                        .HasConstraintName("Fk_DamageTendency_DamageType");

                    b.Navigation("BeastNote");

                    b.Navigation("DamageTendencyType");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("DAL.Entities.FightTeam", b =>
                {
                    b.HasOne("DAL.Entities.SceneSave", "SceneSave")
                        .WithMany("FightTeams")
                        .HasForeignKey("SceneSaveId")
                        .IsRequired()
                        .HasConstraintName("Fk_FightTeam_SceneSave");

                    b.Navigation("SceneSave");
                });

            modelBuilder.Entity("DAL.Entities.HabitatList", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("HabitatLists")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_HabitatList_BeastNote");

                    b.HasOne("DAL.Entities.Habitat", "Habitat")
                        .WithMany("HabitatLists")
                        .HasForeignKey("HabitatId")
                        .IsRequired()
                        .HasConstraintName("Fk_HabitatList_Habitat");

                    b.Navigation("BeastNote");

                    b.Navigation("Habitat");
                });

            modelBuilder.Entity("DAL.Entities.Scene", b =>
                {
                    b.HasOne("DAL.Entities.Campaign", "Campaign")
                        .WithMany("Scenes")
                        .HasForeignKey("CampaignId")
                        .IsRequired()
                        .HasConstraintName("Fk_Scene_Campaign");

                    b.HasOne("DAL.Entities.Setting", "Setting")
                        .WithMany("Scenes")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("Fk_Scene_Setting");

                    b.Navigation("Campaign");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("DAL.Entities.SceneSave", b =>
                {
                    b.HasOne("DAL.Entities.Scene", "Scene")
                        .WithMany("SceneSaves")
                        .HasForeignKey("SceneId")
                        .IsRequired()
                        .HasConstraintName("Fk_SceneSave_Scene");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("DAL.Entities.SenseList", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("SenseLists")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_SenseList_BeastNote");

                    b.HasOne("DAL.Entities.Sense", "Sense")
                        .WithMany("SenseLists")
                        .HasForeignKey("SenseId")
                        .IsRequired()
                        .HasConstraintName("Fk_SenseList_Sense");

                    b.Navigation("BeastNote");

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.HasOne("DAL.Entities.Ability", "Ability")
                        .WithMany("Skills")
                        .HasForeignKey("AbilityId")
                        .IsRequired()
                        .HasConstraintName("Fk_Skill_Ability");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("DAL.Entities.SkillList", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("SkillLists")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_SkillList_BeastNote");

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillLists")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("Fk_SkillList_Skill");

                    b.Navigation("BeastNote");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.SpeedList", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("SpeedLists")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_SpeedList_BeastNote");

                    b.HasOne("DAL.Entities.Speed", "Speed")
                        .WithMany("SpeedLists")
                        .HasForeignKey("SpeedId")
                        .IsRequired()
                        .HasConstraintName("Fk_SpeedList_Speed");

                    b.Navigation("BeastNote");

                    b.Navigation("Speed");
                });

            modelBuilder.Entity("DAL.Entities.SpellSlot", b =>
                {
                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("SpellSlots")
                        .HasForeignKey("BeastNoteId")
                        .IsRequired()
                        .HasConstraintName("Fk_SpellSlot_BeastNote");

                    b.Navigation("BeastNote");
                });

            modelBuilder.Entity("DAL.Entities.SpellSlotsList", b =>
                {
                    b.HasOne("DAL.Entities.Beast", "Beast")
                        .WithMany("SpellSlotsLists")
                        .HasForeignKey("BeastId")
                        .IsRequired()
                        .HasConstraintName("Fk_SpellSlotsList_Beast");

                    b.Navigation("Beast");
                });

            modelBuilder.Entity("DAL.Entities.TemporaryAbilityList", b =>
                {
                    b.HasOne("DAL.Entities.Ability", "Ability")
                        .WithMany("TemporaryAbilityLists")
                        .HasForeignKey("AbilityId")
                        .IsRequired()
                        .HasConstraintName("Fk_TemporaryAbilityList_Ability");

                    b.HasOne("DAL.Entities.Beast", "Beast")
                        .WithMany("TemporaryAbilityLists")
                        .HasForeignKey("BeastId")
                        .IsRequired()
                        .HasConstraintName("Fk_TemporaryAbilityList_Beast");

                    b.Navigation("Ability");

                    b.Navigation("Beast");
                });

            modelBuilder.Entity("DAL.Entities.Thing", b =>
                {
                    b.HasOne("DAL.Entities.Beast", "Beast")
                        .WithMany("Things")
                        .HasForeignKey("BeastId")
                        .HasConstraintName("Fk_Thing_Beast");

                    b.HasOne("DAL.Entities.BeastNote", "BeastNote")
                        .WithMany("Things")
                        .HasForeignKey("BeastNoteId")
                        .HasConstraintName("Fk_Thing_BeastNote");

                    b.Navigation("Beast");

                    b.Navigation("BeastNote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Ability", b =>
                {
                    b.Navigation("AbilityLists");

                    b.Navigation("BeastNotes");

                    b.Navigation("Skills");

                    b.Navigation("TemporaryAbilityLists");
                });

            modelBuilder.Entity("DAL.Entities.Action", b =>
                {
                    b.Navigation("ActionThrows");

                    b.Navigation("ChildActions");
                });

            modelBuilder.Entity("DAL.Entities.ActionResource", b =>
                {
                    b.Navigation("ActionResourceLists");

                    b.Navigation("Actions");
                });

            modelBuilder.Entity("DAL.Entities.Alignment", b =>
                {
                    b.Navigation("BeastNotes");
                });

            modelBuilder.Entity("DAL.Entities.Beast", b =>
                {
                    b.Navigation("ActionResourceLists");

                    b.Navigation("ConditionLists");

                    b.Navigation("SpellSlotsLists");

                    b.Navigation("TemporaryAbilityLists");

                    b.Navigation("Things");
                });

            modelBuilder.Entity("DAL.Entities.BeastNote", b =>
                {
                    b.Navigation("AbilityLists");

                    b.Navigation("Actions");

                    b.Navigation("Beasts");

                    b.Navigation("ConditionImmunitiesLists");

                    b.Navigation("DamageTendencies");

                    b.Navigation("HabitatLists");

                    b.Navigation("SenseLists");

                    b.Navigation("SkillLists");

                    b.Navigation("SpeedLists");

                    b.Navigation("SpellSlots");

                    b.Navigation("Things");
                });

            modelBuilder.Entity("DAL.Entities.BeastType", b =>
                {
                    b.Navigation("BeastNotes");
                });

            modelBuilder.Entity("DAL.Entities.Campaign", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("DAL.Entities.Condition", b =>
                {
                    b.Navigation("ConditionImmunitiesLists");

                    b.Navigation("ConditionLists");
                });

            modelBuilder.Entity("DAL.Entities.CooldownType", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("DAL.Entities.DamageTendencyType", b =>
                {
                    b.Navigation("DamageTendencies");
                });

            modelBuilder.Entity("DAL.Entities.DamageType", b =>
                {
                    b.Navigation("DamageTendencies");
                });

            modelBuilder.Entity("DAL.Entities.FightTeam", b =>
                {
                    b.Navigation("Beasts");
                });

            modelBuilder.Entity("DAL.Entities.Habitat", b =>
                {
                    b.Navigation("HabitatLists");
                });

            modelBuilder.Entity("DAL.Entities.Scene", b =>
                {
                    b.Navigation("SceneSaves");
                });

            modelBuilder.Entity("DAL.Entities.SceneSave", b =>
                {
                    b.Navigation("Beasts");

                    b.Navigation("FightTeams");
                });

            modelBuilder.Entity("DAL.Entities.Sense", b =>
                {
                    b.Navigation("SenseLists");
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("DAL.Entities.Size", b =>
                {
                    b.Navigation("BeastNotes");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillLists");
                });

            modelBuilder.Entity("DAL.Entities.Speed", b =>
                {
                    b.Navigation("SpeedLists");
                });

            modelBuilder.Entity("DAL.Entities.TimeMeasure", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("CreatedBeastNotes");

                    b.Navigation("ModeratedBeastNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
